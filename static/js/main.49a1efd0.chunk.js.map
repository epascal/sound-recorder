{"version":3,"sources":["components/Recording/index.js","components/Recorder/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Recording","stream","controls","src","className","onClick","title","toString","Recorder","useState","recordingStateText","setRecordingStateText","recordButtonClassesText","setRecordButtonClassesText","recordings","setRecordings","constraints","audio","mediaRecorder","useRef","chunks","recordButtonClasses","onStop","blob","Blob","audioURL","window","URL","createObjectURL","push","pop","join","onStart","console","log","initMediaRecorder","mr","a","navigator","mediaDevices","getUserMedia","current","then","currstream","MediaRecorder","onstop","onstart","ondataavailable","e","data","catch","err","start","stop","map","recording","index","App","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"ySA6BeA,EA1BG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OASjB,OACI,mCACA,oCACI,uBAAOC,SAAS,WAAWC,IAAKF,IAChC,8BAAG,sBAAMG,UAAU,OAAhB,+BACH,wBAAQC,QATC,aASkBD,UAAU,WAAWE,MAAM,qBAAtD,6BAEA,wBAAQD,QAdQ,aAckBD,UAAU,SAA5C,sBALUH,EAAOM,eC2FdC,G,MApGE,WAAO,IAAD,EACiCC,mBAAS,UAD1C,mBACZC,EADY,KACQC,EADR,OAE2CF,mBAAS,eAFpD,mBAEZG,EAFY,KAEaC,EAFb,OAGiBJ,mBAAS,IAH1B,mBAGZK,EAHY,KAGAC,EAHA,KAIbC,EAAc,CAAEC,OAAO,GACvBC,EAAgBC,iBAAO,MACzBC,EAAS,GACTC,EAAsB,CAACT,GAGrBU,EAAS,WAEX,IAAMC,EAAO,IAAIC,KAAKJ,EAAQ,CAAE,KAAS,2BACzCA,EAAS,GACT,IAAMK,EAAWC,OAAOC,IAAIC,gBAAgBL,GAC5CT,EAAWe,KAAK,CAAC5B,OAAQwB,IACzBJ,EAAoBS,MACpBjB,EAA2BQ,EAAoBU,KAAK,MACpDhB,EAAcD,GACdH,EAAsB,WAKpBqB,EAAU,WAEZX,EAAoBQ,KAAK,mBACzBI,QAAQC,IAAI,CAACb,wBACbR,EAA2BQ,EAAoBU,KAAK,MACpDpB,EAAsB,SAWpBwB,EAAiB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDAEX,OAAPD,EAFkB,yCAGXE,UAAUC,aAAaC,aAAaxB,IAHzB,2CAAH,sDAgDvB,OACI,qCACI,wBAAQX,QAzCQ,WAEpB8B,EAAkBjB,EAAcuB,SAC/BC,MAAK,SAACC,GACHzB,EAAcuB,QAAU,IAAIG,cAAcD,GAC1CzB,EAAcuB,QAAQI,OAASvB,EAC/BJ,EAAcuB,QAAQK,QAAUd,EAChCd,EAAcuB,QAAQM,gBAAkB,SAASC,GAC7C5B,EAAOS,KAAKmB,EAAEC,UAGrBC,OAAM,SAACC,GACJlB,QAAQC,IAAI,wBAEfQ,MAAK,WACE,WAAahC,EACbQ,EAAcuB,QAAQW,QAEtBlC,EAAcuB,QAAQY,WAuBQjD,UAAWQ,EAA7C,SAAuEF,IAb9DI,EAAWwC,KAAI,SAACC,EAAWC,GACpC,OACI,cAAC,EAAD,CAAWvD,OAAQsD,EAAUtD,QAAasD,EAAUtD,OAAOM,oB,MClE5DkD,MAdf,WAEE,OACE,qCACA,iCACE,kDAEF,+BACE,cAAC,EAAD,UCAcC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBpC,WACrBA,UAAUqC,cAAcC,MACrBlC,MAAK,SAACmC,GACLA,EAAaC,gBAEd5B,OAAM,SAAC6B,GACN9C,QAAQ8C,MAAMA,EAAMC,YE/G5BlB,M","file":"static/js/main.49a1efd0.chunk.js","sourcesContent":["import './style.css'\n\n\nconst Recording = ({ stream }) => {\n\n    const deleteRecording = () => {\n\n    }\n    const editName = () => {\n\n    }\n\n    return (\n        <>\n        <article key={stream.toString()}>\n            <audio controls=\"controls\" src={stream}></audio>\n            <p><span className=\"name\">Unnamed recording</span>\n            <button onClick={editName} className=\"editName\" title=\"Click to edit name\">✏️</button>\n            </p>\n            <button onClick={deleteRecording} className=\"delete\">Delete</button>\n        </article>\n        </>\n    );\n}\n\nRecording.propTypes = {\n\n}\n\nexport default Recording;","import { useState, useRef } from 'react'\n//import Visualizer from '../Visualizer'\nimport Recording from '../Recording'\nimport './style.css'\n\nconst Recorder = () => {\n    const [recordingStateText, setRecordingStateText] = useState('Record')\n    const [recordButtonClassesText, setRecordButtonClassesText] = useState('record-play')\n    const [recordings, setRecordings] = useState([])\n    const constraints = { audio: true }\n    const mediaRecorder = useRef(null)\n    let chunks = []\n    let recordButtonClasses = [recordButtonClassesText]\n\n\n    const onStop = () => {\n\n        const blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });\n        chunks = [];\n        const audioURL = window.URL.createObjectURL(blob);\n        recordings.push({stream: audioURL})\n        recordButtonClasses.pop()\n        setRecordButtonClassesText(recordButtonClasses.join(' '))\n        setRecordings(recordings)\n        setRecordingStateText('Record')\n\n    }\n\n\n    const onStart = () => {\n\n        recordButtonClasses.push('recording-audio')\n        console.log({recordButtonClasses})\n        setRecordButtonClassesText(recordButtonClasses.join(' '))\n        setRecordingStateText('Stop')\n    \n    }\n\n    \n    /**\n     * We only want to initialize if one doesn't already exist\n     * \n     * @param {MediaRecorder} mr \n     * @returns \n     */\n    const initMediaRecorder = async (mr) => {\n\n        if( mr === null ) {\n            return navigator.mediaDevices.getUserMedia(constraints)\n        }\n    \n    }\n    \n\n    const toggleRecording = () => {\n        \n        initMediaRecorder(mediaRecorder.current)\n        .then((currstream) => {\n            mediaRecorder.current = new MediaRecorder(currstream);\n            mediaRecorder.current.onstop = onStop\n            mediaRecorder.current.onstart = onStart\n            mediaRecorder.current.ondataavailable = function(e) {\n                chunks.push(e.data);\n            }\n        })\n        .catch((err) => {\n            console.log('MR already exists')\n        })\n        .then(() => {\n            if( 'Record' === recordingStateText ) {\n                mediaRecorder.current.start();\n            } else {\n                mediaRecorder.current.stop();\n            }\n        })\n\n        \n    }\n\n\n    const renderAudio = () => {\n\n        let audios = recordings.map((recording, index) => {\n            return (\n                <Recording stream={recording.stream} key={recording.stream.toString()} />\n            )   \n        })\n        \n        return audios\n\n    }\n\n\n    return (\n        <>\n            <button onClick={toggleRecording} className={recordButtonClassesText}>{recordingStateText}</button>\n            {renderAudio()}\n        </>\n    )\n}\n\nRecorder.propTypes = {\n    //stream: PropTypes.node\n};\n\nexport default Recorder;\n","import Recorder from './components/Recorder'\nimport './App.css';\n\n\nfunction App() {\n\n  return (\n    <>\n    <header>\n      <h1>Sound Recorder</h1>\n    </header>\n    <main>\n      <Recorder />\n    </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}