{"version":3,"sources":["components/Recording/index.js","components/Recorder/index.js","hooks/useMediaRecorder.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Recording","stream","name","onDeleteHandler","onEditNameHandler","id","controls","src","preload","role","className","onClick","editName","title","deleteRecording","defaultProps","Recorder","defaultRecordClass","useState","recordingStateText","setRecordingStateText","recordings","setRecordings","recordButtonClassesText","setRecordButtonClassesText","chunks","editRecordingName","newRecordings","targetItem","filter","item","index","indexOf","newName","window","prompt","splice","confirm","mediaRecorder","trigger","events","setMediaRecorder","useEffect","mr","MediaRecorder","onstop","onStop","onstart","onStart","ondataavailable","useMediaRecorder","blob","Blob","audioURL","URL","createObjectURL","Date","toISOString","split","join","length","e","push","data","start","stop","map","recording","customKey","App","constraints","useMemo","audio","setStream","error","setError","didCancel","a","navigator","mediaDevices","getUserMedia","getAudioTracks","track","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a9ef0641.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport './style.css'\n\n\nconst Recording = ({ stream, name, onDeleteHandler, onEditNameHandler, id }) => {\n\n    const deleteRecording = (id) => {\n        onDeleteHandler(id)\n    }\n\n    const editName = (id) => {\n        onEditNameHandler(id)\n    }\n\n    return (\n        <>\n        <article id={id}>\n            <audio controls=\"controls\" src={stream} preload=\"auto\" role=\"application\">Sorry, your browser doesn't support recording audio.</audio>\n            <p><span className=\"name\" role=\"presentation\">{name}</span>\n            <button onClick={() => editName(id)} className=\"editName\" title=\"Click to edit name\">✏️</button>\n            </p>\n            <button onClick={() => deleteRecording(id)} className=\"delete\">Delete</button>\n        </article>\n        </>\n    );\n}\n\nRecording.defaultProps = {\n    stream: {\n        stream: 'blob:http://localhost',\n        name: 'Default recording name',\n        id: 'id0'\n    }\n  };\n\nRecording.propTypes = {\n    stream: PropTypes.string,\n    name: PropTypes.string,\n    id: PropTypes.string,\n    onDeleteHandler: PropTypes.func,\n    onEditNameHandler: PropTypes.func\n}\n\nexport default Recording;","import { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport useMediaRecorder from '../../hooks/useMediaRecorder'\n//import Visualizer from '../Visualizer'\nimport Recording from '../Recording'\nimport './style.css'\n\nconst Recorder = ({stream}) => {\n    const defaultRecordClass = 'record-play'\n    const [recordingStateText, setRecordingStateText] = useState('Record')\n    const [recordings, setRecordings] = useState([])\n    const [recordButtonClassesText, setRecordButtonClassesText] = useState(defaultRecordClass)\n    let chunks = []\n\n    const onStop = () => {\n\n        const blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' })\n        chunks = []\n        const audioURL = window.URL.createObjectURL(blob)\n        setRecordings(recordings => {\n            return [...recordings, ...[{\n                stream: audioURL, \n                name: new Date().toISOString().split('.')[0].split('T').join(' '),\n                id: `id${recordings.length}`\n            }]]\n        })\n        setRecordButtonClassesText(defaultRecordClass)\n        setRecordingStateText('Record')\n    }\n\n\n    const onStart = () => {\n\n    \n    }\n\n\n    const ondataavailable = (e) => {\n        chunks.push(e.data)\n    }\n\n\n    const toggleRecording = () => {\n\n        if( 'Record' === recordingStateText ) {\n            setRecordButtonClassesText(defaultRecordClass + ' recording-audio')\n            setRecordingStateText('Stop')\n            mediaRecorder.start(1000)\n        } else {\n            setRecordingStateText('Record')\n            mediaRecorder.stop()\n        }\n\n    }\n\n    const editRecordingName = (id) => {\n        let newRecordings = [...recordings]\n        let targetItem = recordings.filter((item) => {\n            if( item.id === id ) {\n                return item\n            }\n            return false\n        })\n        let index = recordings.indexOf(targetItem[0])\n        let newName = window.prompt('Enter a new name', targetItem[0].name) ?? targetItem[0].name // necessary because this returns null if the user doesn't enter anything\n        targetItem[0].name = newName\n        newRecordings.splice(index, 1, targetItem[0])\n        setRecordings(newRecordings)\n    }\n\n    const deleteRecording = (id) => {\n        let deleteRecording = window.confirm('Are you sure you want to delete this recording?')\n        if (deleteRecording === true) {\n            let newRecordings = recordings.filter((item) => {\n                if (id !== item.id) {\n                    return true\n                }\n                return false\n            })\n            setRecordings([...newRecordings])\n        }\n    }\n\n    const mediaRecorder = useMediaRecorder(stream, recordButtonClassesText, {onStart: onStart, onStop: onStop, ondataavailable: ondataavailable})\n\n    const renderAudio = () => {\n        let audios = recordings.map((recording, index) => {\n            let customKey = `id${index}`\n            return (\n                <Recording \n                    stream={recording.stream} \n                    key={customKey} \n                    name={recording.name} \n                    id={recording.id} \n                    onDeleteHandler={deleteRecording} \n                    onEditNameHandler={editRecordingName} />\n            )\n        })\n        \n        return audios\n\n    }\n\n\n    return (\n        <>\n            <button onClick={toggleRecording} className={recordButtonClassesText}>{recordingStateText}</button>\n            <section>\n                {renderAudio()}\n            </section>\n        </>\n    )\n}\n\nRecorder.propTypes = {\n    stream: PropTypes.object\n};\n\nexport default Recorder\n","import { useEffect, useState } from 'react'\n\nexport default function useMediaRecorder (stream, trigger, events) {\n    const [mediaRecorder, setMediaRecorder] = useState(null)\n\n    useEffect(() => {\n        if( mediaRecorder === null ) {\n            let mr = null\n            mr = new MediaRecorder(stream)\n            mr.onstop = events.onStop\n            mr.onstart = events.onStart\n            mr.ondataavailable = events.ondataavailable\n            setMediaRecorder(mr)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [trigger])\n\n    return mediaRecorder\n}","import Recorder from './components/Recorder'\nimport './App.css';\nimport { useEffect, useState, useMemo } from 'react';\n\nfunction App() {\n  const constraints = useMemo(() => { return {audio: true} }, [])\n  const [stream, setStream] = useState(null)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    if ( stream ) {\n      return\n    }\n\n    let didCancel = false\n\n    const getUserMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        if (!didCancel) {\n          setStream(stream);\n        }\n      } catch (err) {\n        if (!didCancel) {\n          setError(err);\n        }\n      }\n    }\n\n    const cancel = () => {\n      didCancel = true;\n\n      if (!stream) return;\n\n      if ((stream).getAudioTracks) {\n        (stream).getAudioTracks().map(track => track.stop());\n      }\n\n      if ((stream).stop) {\n        (stream).stop();\n      }\n    }\n\n    getUserMedia();\n\n    return cancel;\n  }, [constraints, stream, error])\n\n  const recoderRenderer = () => {\n    if( stream === null ) {\n      return (<button className=\"record-play\">…</button>)\n    }\n    return (\n      <Recorder stream={stream} />\n    )\n  }\n  \n  return (\n    <>\n    <header>\n      <h1>Sound Recorder</h1>\n    </header>\n    <main>\n      {recoderRenderer()}\n    </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}