{"version":3,"sources":["components/Recorder/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Recorder","useState","recordingStateText","setRecordingStateText","constraints","audio","mediaRecorder","useRef","chunks","onStop","console","log","initMediaRecorder","a","currstream","current","navigator","mediaDevices","getUserMedia","MediaRecorder","onstop","ondataavailable","e","push","data","toggleRecording","start","stop","onClick","className","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sRAqFeA,EAlFE,WAAO,IAAD,EACiCC,mBAAS,UAD1C,mBACZC,EADY,KACQC,EADR,KAGbC,EAAc,CAAEC,OAAO,GACvBC,EAAgBC,iBAAO,MACzBC,EAAS,GAEPC,EAAS,WAEXC,QAAQC,IAAI,sCAGVC,EAAiB,uCAAG,4BAAAC,EAAA,yDAElBC,EAAa,KAEa,OAA1BR,EAAcS,QAJI,0CAOKC,UAAUC,aAAaC,aAAad,GAPzC,OAOdU,EAPc,8DASdJ,QAAQC,IAAI,+BATE,2BAalBL,EAAcS,QAAU,IAAII,cAAcL,GAC1CR,EAAcS,QAAQK,OAASX,EAC/BH,EAAcS,QAAQM,gBAAkB,SAASC,GAC7Cd,EAAOe,KAAKD,EAAEE,OAhBA,yDAAH,qDAwBjBC,EAAe,uCAAG,sBAAAZ,EAAA,sEAEdD,IAFc,OAIhBN,EAAcS,UACV,WAAab,GACbI,EAAcS,QAAQW,QACtBvB,EAAsB,UAEtBG,EAAcS,QAAQY,OACtBxB,EAAsB,UACtBG,EAAcS,QAAU,OAXZ,2CAAH,qDAmCrB,OACI,mCAlBIC,UAAUC,aAAaC,aAGnB,qCACA,wBAAQU,QAASH,EAAjB,SAAmCvB,IACnC,6BAKA,mCACI,mBAAG2B,UAAU,UAAb,uF,MClDLC,MAdf,WAEE,OACE,qCACA,iCACE,kDAEF,qBAAKD,UAAU,OAAf,SACE,cAAC,EAAD,UCAcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBjC,WACrBA,UAAUkC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN7C,QAAQ6C,MAAMA,EAAMC,YE/G5BpB,M","file":"static/js/main.dc968122.chunk.js","sourcesContent":["import { useState, useRef } from 'react'\nimport Visualizer from '../Visualizer'\n\nconst Recorder = () => {\n    const [recordingStateText, setRecordingStateText] = useState('Record')\n\n    const constraints = { audio: true }\n    const mediaRecorder = useRef(null)\n    let chunks = []\n\n    const onStop = () => {\n        // add a recording to the list\n        console.log('Just finished recording some data')\n    }\n\n    const initMediaRecorder = async () => {\n\n        let currstream = null\n        \n        if( mediaRecorder.current === null ) {\n        \n            try {\n                currstream = await navigator.mediaDevices.getUserMedia(constraints);\n            } catch(err) {\n                console.log('Whoops! Cannot get a stream')\n                return\n            }\n        \n            mediaRecorder.current = new MediaRecorder(currstream);\n            mediaRecorder.current.onstop = onStop\n            mediaRecorder.current.ondataavailable = function(e) {\n                chunks.push(e.data);\n            }\n        \n        }\n    \n    }\n    \n\n    const toggleRecording = async () => {\n        \n        await initMediaRecorder()\n\n        if( mediaRecorder.current ) {\n            if( 'Record' === recordingStateText ) {\n                mediaRecorder.current.start();\n                setRecordingStateText('Stop')\n            } else {\n                mediaRecorder.current.stop();\n                setRecordingStateText('Record')\n                mediaRecorder.current = null;\n            }\n        }\n        \n    }\n\n    const ui = () => {\n        if( navigator.mediaDevices.getUserMedia ) {\n            // create the recorder\n            return (\n                <>\n                <button onClick={toggleRecording}>{recordingStateText}</button>\n                <audio></audio>\n                </>\n            )\n        } else {\n            return (\n                <>\n                    <p className=\"warning\">Sorry. This device doesn't support recording using this application.</p>\n                </>\n            )\n        }\n    }\n    \n    return (\n        <>\n        {ui()}\n        </>\n    )\n}\n\nRecorder.propTypes = {\n    //stream: PropTypes.node\n};\n\nexport default Recorder;\n","import Recorder from './components/Recorder'\nimport './App.css';\n\n\nfunction App() {\n\n  return (\n    <>\n    <header>\n      <h1>Sound Recorder</h1>\n    </header>\n    <div className=\"body\">\n      <Recorder />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}