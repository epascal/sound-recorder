{"version":3,"sources":["components/Recording/index.js","components/Recorder/index.js","hooks/useMediaRecorder.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Recording","stream","name","onDeleteHandler","onEditNameHandler","id","controls","src","preload","role","className","onClick","e","title","defaultProps","Recorder","useState","isRecording","setIsRecording","recordings","setRecordings","chunks","setChunks","recorder","useMemo","MediaRecorder","onstop","blob","Blob","audioURL","window","URL","createObjectURL","currentRecordings","Date","toISOString","split","join","performance","now","toString","onstart","ondataavailable","currentChunks","data","useMediaRecorder","defaultRecordClass","recordButtonClassesText","recordingStateText","editRecordingName","target","parentNode","attributes","value","newRecordings","targetItem","filter","item","index","indexOf","newName","prompt","splice","deleteRecording","confirm","classList","add","setTimeout","stop","start","map","recording","customKey","App","constraints","audio","setStream","error","setError","useEffect","didCancel","a","navigator","mediaDevices","getUserMedia","getAudioTracks","track","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kTAIMA,EAAY,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,OAAQC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,gBAAiBC,EAA4B,EAA5BA,kBAAmBC,EAAS,EAATA,GAUnE,OACI,mCACA,0BAASA,GAAIA,EAAb,UACI,uBAAOC,SAAS,WAAWC,IAAKN,EAAQO,QAAQ,OAAOC,KAAK,cAA5D,kEACA,8BAAG,sBAAMC,UAAU,OAAOD,KAAK,eAA5B,SAA4CP,IAC/C,wBAAQS,QATC,SAACC,GACdR,EAAkBQ,IAQaF,UAAU,WAAWG,MAAM,qBAAtD,6BAEA,wBAAQF,QAfQ,SAACC,GACrBT,EAAgBS,IAcsBF,UAAU,SAA5C,0BAMZV,EAAUc,aAAe,CACrBb,OAAQ,CACJA,OAAQ,wBACRC,KAAM,yBACNG,GAAI,QAYGL,Q,MCrCf,IAgFee,EAhFE,SAAC,GAAc,IAAD,ECiBhB,SAA0Bd,GAAS,IAAD,EACTe,oBAAS,GADA,mBACxCC,EADwC,KAC3BC,EAD2B,OAEXF,mBAAS,IAFE,mBAExCG,EAFwC,KAE5BC,EAF4B,OAGnBJ,mBAAS,IAHU,mBAGxCK,EAHwC,KAGhCC,EAHgC,KAKzCC,EAAWC,mBAAQ,kBAAM,IAAIC,cAAcxB,KAAS,CAACA,IA+B3D,OAJAsB,EAASG,OArBU,WACjB,IAAMC,EAAO,IAAIC,KAAKP,EAAQ,CAAE,KAAS,2BACnCQ,EAAWC,OAAOC,IAAIC,gBAAgBL,GAG5CP,GAAc,SAAAa,GACZ,MAAM,GAAN,mBAAWA,GAAsB,CAAC,CAChChC,OAAQ4B,EACR3B,MAAM,IAAIgC,MAAOC,cAAcC,MAAM,KAAK,GAAGA,MAAM,KAAKC,KAAK,KAC7DhC,GAAG,KAAD,OAAOyB,OAAOQ,YAAYC,MAAMC,kBAItClB,EAAU,IACVJ,GAAe,IAQjBK,EAASkB,QA1BW,WAClBvB,GAAe,IA0BjBK,EAASmB,gBANmB,SAAC9B,GAC3BU,GAAU,SAAAqB,GAAa,4BAAQA,GAAR,CAAuB/B,EAAEgC,WAO3C,CACLrB,WACAJ,aACAC,gBACAH,eDxD6D4B,CADlC,EAAZ5C,QACPsB,EADmB,EACnBA,SAAUJ,EADS,EACTA,WAAYC,EADH,EACGA,cAAeH,EADlB,EACkBA,YAEvC6B,EAAqB,cACrBC,EAA0BvB,mBAAQ,kBAAMP,EAAW,UAAM6B,EAAN,oBAA6CA,IAAoB,CAAC7B,IACrH+B,EAAqBxB,mBAAQ,kBAAMP,EAAc,OAAS,WAAU,CAACA,IAUrEgC,EAAoB,SAACrC,GAAO,IAAD,EACzBP,EAAKO,EAAEsC,OAAOC,WAAWA,WAAWC,WAAW/C,GAAGgD,MAClDC,EAAa,YAAOnC,GACpBoC,EAAapC,EAAWqC,QAAO,SAACC,GAChC,OAAIA,EAAKpD,KAAOA,GACLoD,KAIXC,EAAQvC,EAAWwC,QAAQJ,EAAW,IACtCK,EAAO,UAAG9B,OAAO+B,OAAO,mBAAoBN,EAAW,GAAGrD,aAAnD,QAA4DqD,EAAW,GAAGrD,KACrFqD,EAAW,GAAGrD,KAAO0D,EACrBN,EAAcQ,OAAOJ,EAAO,EAAGH,EAAW,IAC1CnC,EAAckC,IAGZS,EAAkB,SAACnD,GACrB,IAAIP,EAAKO,EAAEsC,OAAOC,WAAWC,WAAW/C,GAAGgD,MACvCU,EAAkBjC,OAAOkC,QAAQ,mDACrC,IAAwB,IAApBD,EAA0B,CAC1B,IAAIT,EAAgBnC,EAAWqC,QAAO,SAACC,GACnC,OAAIpD,IAAOoD,EAAKpD,MAKpBO,EAAEsC,OAAOC,WAAWc,UAAUC,IAAI,UAClCC,YAAW,WACP/C,EAAc,YAAIkC,MACnB,OAsBX,OACI,qCACI,wBAAQ3C,QA7DQ,WACfM,EAGDM,EAAS6C,OAFT7C,EAAS8C,MAAM,MA2DmB3D,UAAWqC,EAA7C,SAAuEC,IACvE,kCApBS7B,EAAWmD,KAAI,SAACC,EAAWb,GACpC,IAAIc,EAAS,YAAQd,GACrB,OACI,cAAC,EAAD,CACIzD,OAAQsE,EAAUtE,OAElBC,KAAMqE,EAAUrE,KAChBG,GAAIkE,EAAUlE,GACdF,gBAAiB4D,EACjB3D,kBAAmB6C,GAJduB,Y,MESVC,MAjEf,WACE,IAAMC,EAAclD,mBAAQ,WAAQ,MAAO,CAACmD,OAAO,KAAS,IAD/C,EAEe3D,mBAAS,MAFxB,mBAENf,EAFM,KAEE2E,EAFF,OAGa5D,mBAAS,MAHtB,mBAGN6D,EAHM,KAGCC,EAHD,KAqDb,OAhDAC,qBAAU,WACR,IAAK9E,EAAL,CAIA,IAAI+E,GAAY,EA+BhB,OA7BkB,uCAAG,4BAAAC,EAAA,+EAEIC,UAAUC,aAAaC,aAAaV,GAFxC,OAEXzE,EAFW,OAGZ+E,GACHJ,EAAU3E,GAJK,gDAOZ+E,GACHF,EAAS,EAAD,IARO,yDAAH,oDA2BlBM,GAde,WACbJ,GAAY,EAEP/E,IAEAA,EAAQoF,gBACVpF,EAAQoF,iBAAiBf,KAAI,SAAAgB,GAAK,OAAIA,EAAMlB,UAG1CnE,EAAQmE,MACVnE,EAAQmE,YAOZ,CAACM,EAAazE,EAAQ4E,IAYvB,qCACA,iCACE,kDAEF,+BAbe,OAAX5E,EACM,wBAAQS,UAAU,cAAlB,oBAGR,cAAC,EAAD,CAAUT,OAAQA,UCzCJsF,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBtB,WACrBA,UAAUuB,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAAChC,GACNiC,QAAQjC,MAAMA,EAAMkC,YE/G5BpB,M","file":"static/js/main.de0256bb.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport './style.css'\n\n\nconst Recording = ({ stream, name, onDeleteHandler, onEditNameHandler, id }) => {\n\n    const deleteRecording = (e) => {\n        onDeleteHandler(e)\n    }\n\n    const editName = (e) => {\n        onEditNameHandler(e)\n    }\n\n    return (\n        <>\n        <article id={id}>\n            <audio controls=\"controls\" src={stream} preload=\"auto\" role=\"application\">Sorry, your browser doesn't support recording audio.</audio>\n            <p><span className=\"name\" role=\"presentation\">{name}</span>\n            <button onClick={editName} className=\"editName\" title=\"Click to edit name\">✏️</button>\n            </p>\n            <button onClick={deleteRecording} className=\"delete\">Delete</button>\n        </article>\n        </>\n    );\n}\n\nRecording.defaultProps = {\n    stream: {\n        stream: 'blob:http://localhost',\n        name: 'Default recording name',\n        id: 'id0'\n    }\n  };\n\nRecording.propTypes = {\n    stream: PropTypes.string,\n    name: PropTypes.string,\n    id: PropTypes.string,\n    onDeleteHandler: PropTypes.func,\n    onEditNameHandler: PropTypes.func\n}\n\nexport default Recording;","import { useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport Recording from '../Recording'\nimport './style.css'\nimport useMediaRecorder from \"../../hooks/useMediaRecorder\";\n\nconst Recorder = ({stream}) => {\n    const { recorder, recordings, setRecordings, isRecording } = useMediaRecorder(stream);\n\n    const defaultRecordClass = 'record-play'\n    const recordButtonClassesText = useMemo(() => isRecording ? `${defaultRecordClass} recording-audio` : defaultRecordClass, [isRecording])\n    const recordingStateText = useMemo(() => isRecording ? 'Stop' : 'Record', [isRecording])\n\n    const toggleRecording = () => {\n        if (!isRecording) {\n            recorder.start(1000)\n        } else {\n            recorder.stop();\n        }\n    }\n\n    const editRecordingName = (e) => {\n        let id = e.target.parentNode.parentNode.attributes.id.value\n        let newRecordings = [...recordings]\n        let targetItem = recordings.filter((item) => {\n            if( item.id === id ) {\n                return item\n            }\n            return false\n        })\n        let index = recordings.indexOf(targetItem[0])\n        let newName = window.prompt('Enter a new name', targetItem[0].name) ?? targetItem[0].name // necessary because this returns null if the user doesn't enter anything\n        targetItem[0].name = newName\n        newRecordings.splice(index, 1, targetItem[0])\n        setRecordings(newRecordings)\n    }\n\n    const deleteRecording = (e) => {\n        let id = e.target.parentNode.attributes.id.value\n        let deleteRecording = window.confirm('Are you sure you want to delete this recording?')\n        if (deleteRecording === true) {\n            let newRecordings = recordings.filter((item) => {\n                if (id !== item.id) {\n                    return true\n                }\n                return false\n            })\n            e.target.parentNode.classList.add('vanish')\n            setTimeout(() => {\n                setRecordings([...newRecordings])\n            }, 1000)\n        }\n    }\n\n    const renderAudio = () => {\n        let audios = recordings.map((recording, index) => {\n            let customKey = `id${index}`\n            return (\n                <Recording \n                    stream={recording.stream} \n                    key={customKey} \n                    name={recording.name} \n                    id={recording.id} \n                    onDeleteHandler={deleteRecording} \n                    onEditNameHandler={editRecordingName} />\n            )\n        })\n        \n        return audios\n\n    }\n\n    return (\n        <>\n            <button onClick={toggleRecording} className={recordButtonClassesText}>{recordingStateText}</button>\n            <section>\n                {renderAudio()}\n            </section>\n        </>\n    )\n}\n\nRecorder.propTypes = {\n    stream: PropTypes.object\n};\n\nexport default Recorder\n","import {useMemo, useState} from \"react\";\n\n/**\n * This media recorder hook keeps all the logic needed to perform an audio recording decoupling it from any component\n * so it can be reused if needed.\n *\n * This way, when it comes to testing you only need to mock this `recorder` hook and its returned values.\n *\n * The hook in use would look like this:\n * const { recording, recordings, setRecordings, isRecording } = useMediaRecorded(stream);\n *\n * The `setRecordings` method is exposed so that we can perform modifications to the list of recordings from the component\n * avoiding to bloat the logic of this hook (tough it could also be a good idea to do so) but we kept it like this for simplicity\n *\n * @param {Object} stream\n * @returns {{\n * recorder: { start: Function, stop: Function },\n * isRecording: boolean,\n * recordings: any[],\n * setRecordings: Function\n * }}\n *\n */\nexport default function useMediaRecorder(stream) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordings, setRecordings] = useState([]);\n  const [chunks, setChunks] = useState([]);\n\n  const recorder = useMemo(() => new MediaRecorder(stream), [stream]);\n\n  const handleStart = () => {\n    setIsRecording(true);\n  }\n\n  const handleStop = () => {\n    const blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' })\n    const audioURL = window.URL.createObjectURL(blob)\n\n    // push the new recording to the recordings list\n    setRecordings(currentRecordings => {\n      return [...currentRecordings, ...[{\n        stream: audioURL,\n        name: new Date().toISOString().split('.')[0].split('T').join(' '),\n        id: `id${window.performance.now().toString()}`\n      }]]\n    })\n\n    setChunks([])\n    setIsRecording(false);\n  }\n\n  const handleDataAvailable = (e) => {\n    setChunks(currentChunks => [...currentChunks, e.data]);\n  }\n\n  recorder.onstop = handleStop;\n  recorder.onstart = handleStart;\n  recorder.ondataavailable = handleDataAvailable;\n\n  return {\n    recorder,\n    recordings,\n    setRecordings,\n    isRecording,\n  }\n}\n","import Recorder from './components/Recorder'\nimport './App.css';\nimport { useEffect, useState, useMemo } from 'react';\n\nfunction App() {\n  const constraints = useMemo(() => { return {audio: true} }, [])\n  const [stream, setStream] = useState(null)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    if ( stream ) {\n      return\n    }\n\n    let didCancel = false\n\n    const getUserMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        if (!didCancel) {\n          setStream(stream);\n        }\n      } catch (err) {\n        if (!didCancel) {\n          setError(err);\n        }\n      }\n    }\n\n    const cancel = () => {\n      didCancel = true;\n\n      if (!stream) return;\n\n      if ((stream).getAudioTracks) {\n        (stream).getAudioTracks().map(track => track.stop());\n      }\n\n      if ((stream).stop) {\n        (stream).stop();\n      }\n    }\n\n    getUserMedia();\n\n    return cancel;\n  }, [constraints, stream, error])\n\n  const recoderRenderer = () => {\n    if( stream === null ) {\n      return (<button className=\"record-play\">…</button>)\n    }\n    return (\n      <Recorder stream={stream} />\n    )\n  }\n  \n  return (\n    <>\n    <header>\n      <h1>Sound Recorder</h1>\n    </header>\n    <main>\n      {recoderRenderer()}\n    </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}